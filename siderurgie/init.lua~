-- A FAIRE :
-- essai nouveau bloc cockerie
-- modifier le bloc hf ( coke a la place de charbon et 4 cke = 1 seau de fonte )

-- creation d'une texture panneau danger gaz // OK
-- programmation panneau danger gaz
-- creation de tuyaux ( remplacement du gaz ) //OK
-- programmation des tuyaux : si contre bloc hf_on ou alors contre tuyaux_on alors tuyaux_on

-- programmation bloc acierie et cockerie : si contre bloc tuyaux on alors block acierie/cokerie_on

--Ajout du bloc effaceur de jat


--=====================================================================================================================================================================
--=====================================================================================================================================================================


-- SIDERURGIE

-- créé par turbogus

-- Licence GPL

--Description :
--Mode permettant de créer de l'acier ( steel_ingot ) à partir du charbon de la glaise et du gravier.
-- On créer un haut fourneau, celui-ci doit être plaçé en dessous d'une source de lave ( combustible )
-- L'utilisateur doit avoir du minerai de charbon dans son inventaire ( coal_lump). En cliquant sur le bloc haut fourneau, le minerai de fer se transforme en fonte.
-- On craft ensuite de l'additif avec du gravier et de la glaise ( clay_lump )
-- On place un seau de fonte et le melange d'additif dans le bloc acierie et le tout se transforme alors en lingot de fer.

--=================================================================
--=================================================================

--melange additif
-----------------

--Déclaration du mélange additif :

minetest.register_craftitem("siderurgie:melange", {
	description = "melange pour acier",
	inventory_image = "melange.png",
})


-- Craft du melange additif :

minetest.register_craft({
	output = 'siderurgie:melange 4',
	recipe = {
		{'default:clay_lump'},
		{'default:gravel'},
	}
})

--Déclaration du mélange additif comme utilisable dans un four

minetest.register_craft({
	type = "cooking",
	output = "default:steel_ingot",
	recipe = "siderurgie:melange",
})

--================================================================

--Seau de fonte
---------------

--Déclaration du seau de fonte :

minetest.register_craftitem("siderurgie:fonte", {
	description = "seau de fonte liquide",
	inventory_image = "fonte.png",
})

--Déclaration du seau de fonte en temps que combustible :

minetest.register_craft({
	type = "fuel",
	recipe = "siderurgie:fonte",
	burntime = 40,
})

--=================================================================

--Coke
------

--Déclaration du coke ( utiliser dans hf pour obtenir de la fonte

minetest.register_craftitem("siderurgie:coke", {
	description = "Bloc de coke",
	inventory_image ="coke.png",
})	
--================================================================

-- GAZ pour acierie et cokerie
------------------------------

-- Fluide permettant de mettre en service la cockerie ( comme l'ecoulement de gaz sur le bloc HF ):
-- Propriété : tres inflammable et toxique.

WATER_ALPHA = 200
WATER_VISC = 1

minetest.register_node("siderurgie:gaz_flowing", {
	description = "gaz",
	inventory_image = minetest.inventorycube("gaz.png"),
	drawtype = "glasslike",
	tiles = {"gaz.png"},
	special_tiles = {
		{name="gaz.png", backface_culling=false},
		{name="gaz.png", backface_culling=true},
	},
	alpha = WATER_ALPHA,
	paramtype = "light",
	walkable = false,
	pointable = false,
	diggable = false,
	buildable_to = true,
	liquidtype = "flowing", 
	liquid_alternative_flowing = "siderurgie:gaz_flowing",
	liquid_alternative_source = "siderurgie:gaz_source",
	liquid_viscosity = WATER_VISC,
	post_effect_color = {a=64, r=100, g=100, b=200},
	
	groups = {flammable=1},
})

minetest.register_node("siderurgie:gaz_source", {
	description = "gaz",
	inventory_image = minetest.inventorycube("gaz.png"),

	drawtype = "glasslike",
	tiles = {"gaz.png"},
	special_tiles = {
		-- New-style water source material (mostly unused)
		{name="gaz.png", backface_culling=false},
	},
	alpha = WATER_ALPHA,
	paramtype = "light",
	walkable = false,
	pointable = false,
	diggable = false,
	buildable_to = true,
	liquidtype = "source",
	liquid_alternative_flowing = "siderurgie:gaz_flowing",
	liquid_alternative_source = "siderurgie:gaz_source",
	liquid_viscosity = WATER_VISC,
	post_effect_color = {a=64, r=100, g=100, b=200},
	
	groups = {flammable=1},
})

minetest.register_abm(									
    {nodenames = {"siderurgie:gaz_flowing"},							
    interval = 1.0,									
    chance = 1,										
    action = function(pos, node, active_object_count, active_object_count_wider)	
    local objs = minetest.env:get_objects_inside_radius(pos, 1)				
        for k, obj in pairs(objs) do							
        obj:set_hp(obj:get_hp()-0.5)  
        end   
    end,
})

--=================================================================

--Panneau danger gaz
--------------------

--Déclaration du panneau :

minetest.register_node("siderurgie:panneaugaz", {
	description = "Panneau danger gaz",
	drawtype = "signlike",
	tiles = {"panneaugaz.png"},
	inventory_image = "panneaugaz.png",
	wield_image = "panneaugaz.png",
	paramtype = "light",
	paramtype2 = "wallmounted",
	sunlight_propagates = true,
	walkable = false,
	metadata_name = "sign",
	selection_box = {
		type = "wallmounted",
		--wall_top = <default>
		--wall_bottom = <default>
		--wall_side = <default>
	},
	groups = {choppy=2,dig_immediate=2},
	legacy_wallmounted = true,
--	sounds = default.node_sound_defaults(),
	--on_construct = function(pos)
	--	--local n = minetest.env:get_node(pos)
	--	local meta = minetest.env:get_meta(pos)
	--	meta:set_string("formspec", "hack:sign_text_input")
	--	meta:set_string("infotext", "\"\"")
--	end,
--	on_receive_fields = function(pos, formname, fields, sender)
	--	--print("Sign at "..minetest.pos_to_string(pos).." got "..dump(fields))
	--	local meta = minetest.env:get_meta(pos)
	--	fields.text = fields.text or ""
	--	print((sender:get_player_name() or "").." wrote \""..fields.text..
	--			"\" to sign at "..minetest.pos_to_string(pos))
	--	meta:set_string("text", fields.text)
	--	meta:set_string("infotext", '"'..fields.text..'"')
--	end,
})

--================================================================
--================================================================
--================================================================

-- Bloc cockerie :
------------------

-- Permet de transformer le charbon en coke ( 2 charbon = 1 coke ), doit etre alimenté par une source de gaz

--Declaration du bloc Haut cokerie :

minetest.register_node("siderurgie:ck", {
	description = "bloc Cockerie",
	tiles = {"ck_off.png"},
	paramtype2 = "facedir",
	light_source = 8,
	drop = "default:furnace",
	--groups = {cracky=2},
	walkable = true,
	pointable = true,
	diggable = false,
	is_ground_content = false,
	legacy_facedir_simple = true,
	
})

minetest.register_node("siderurgie:ck_on", {
	description = "bloc haut fourneau",
	tiles = {"ck_on.png"},
	paramtype2 = "facedir",
	light_source = 8,
	drop = "default:furnace",
	--groups = {cracky=2},
	walkable = true,
	pointable = true,
	diggable = false,
	is_ground_content = false,
	legacy_facedir_simple = true,
	
})

-- Gestion : si alimenté en gaz alors le bloc fonctionne :

minetest.register_abm({
nodenames = {"siderurgie:ck"},
	interval = 1,
	chance = 1,
	action = function(pos, node, active_object_count, active_object_count_wider)
		local waterpos={x=pos.x, y=pos.y+1, z=pos.z}
		if minetest.env:get_node(waterpos).name=="siderurgie:gaz_flowing" then
			--minetest.env:remove_node(pos)
			minetest.env:add_node(pos, {name="siderurgie:ck_on"})
			nodeupdate(pos)
			
		end
	end,
})

minetest.register_abm({
nodenames = {"siderurgie:ck_on"},
	interval = 1,
	chance = 1,
	action = function(pos, node, active_object_count, active_object_count_wider)
		local waterpos={x=pos.x, y=pos.y+1, z=pos.z}
		if minetest.env:get_node(waterpos).name~="siderurgie:gaz_flowing" then
			--minetest.env:remove_node(pos)
			minetest.env:add_node(pos, {name="siderurgie:ck"})
			nodeupdate(pos)
			
		end
	end,
})

-- Creation du coke : si presence de coal ( x2 ) dans le menu des item du joueur, suppression et remplacement par un seau de fonte :

--minetest.register_on_punchnode(function(p, node, player)
--	if node.name =="siderurgie:cl_on" then
--		local nbCoals = 0 --Compteur de charbons
--		local myInventory = player:get_inventory() --Inventaire du joueur
--		local coalsFound = false --Booleen qui définit si on a trouvé au moins le nombre de charbons souhaité (ici:2)
--		local currentIndex = 0 --Index courant dans l'inventaire
--		
--		while coalsFound == false and currentIndex < myInventory:get_size("main") --Tant qu'on a pas trouvé le nombre de charbons suffisant et qu'on a pas atteint la fin de la liste
--			local currentStack = myInventory:get_stack("main", currentIndex) --On récupère le stack à l'index considéré
--			if currentStack:get_name()=='default:coal_lump' then --Si le stack courant est bien un stack de charbon
--				nbCoals = nbCoals + currentStack:get_count() --On additionne le nombre de charbon du stack courant au compteur de charbons
--				
--				if nbCoals > 1 then --Si on a compté au moins 2 charbons, on passe le boolean à true (pour sortir du while au prochain tour de boucle)
--					coalsFound = true
--				end
--			end
--			currentIndex = currentIndex + 1 --On incrémente l'index pour le prochain tour de boucle.
--		end
		
--		if coalsFound then --Si on a trouvé le nombre de charbons nécessaire
--			player:get_inventory():add_item('main', "siderurgie:coke")
--			player:get_inventory():remove_item('main', 'default:coal_lump 2')
--		end
--	end
	
minetest.register_on_punchnode(function(p, node, player)
	if node.name=="siderurgie:ck_on" and player:get_inventory():contains_item('main', 'default:coal_lump 2') then
		player:get_inventory():add_item('main', "siderurgie:coke")
		player:get_inventory():remove_item('main', 'default:coal_lump 2')
	end

end)






--================================================================

--Bloc acierie
--------------

-- Le bloc aciérie permet de combiner la fonte liquide et le melange additif en lingit d'acier. 1 seau de fonte + 8 melange additif donne 2 lingot d'acier


--Déclaration du bloc aciérie ( furnace ) !!!!!!! A VOIR PAR REMPLACER PAR UN BLOC CLIQUABLE CAR LES JOUEURS PEUVENT SINON UTILISER UN FOUR STANDARD !!!!

--Utilisation de la classe four, simplement changé le nom des textures...

minetest.register_node("siderurgie:ac", {
	description = "bloc acierie",
	tiles = {"ac_top.png", "ac_bottom.png", "ac_side.png", "ac_side.png", "ac_side.png", "ac_front.png"},
	paramtype2 = "facedir",
	--groups = {cracky=2},
	walkable = true,
	pointable = true,
	diggable = false,
	is_ground_content = false,
	legacy_facedir_simple = true,
	--sounds = default.node_sound_stone_defaults(),
	on_construct = function(pos)
		local meta = minetest.env:get_meta(pos)
		meta:set_string("formspec",
				"invsize[8,9;]"..
				"image[2,2;1,1;ac_fire_bg.png]"..
				"list[current_name;fuel;2,3;1,1;]"..
				"list[current_name;src;2,1;1,1;]"..
				"list[current_name;dst;5,1;2,2;]"..
				"list[current_player;main;0,5;8,4;]")
		meta:set_string("infotext", "Acierie") 
		local inv = meta:get_inventory()
		inv:set_size("fuel", 1)
		inv:set_size("src", 1)
		inv:set_size("dst", 4)
	end,
	can_dig = function(pos,player)
		local meta = minetest.env:get_meta(pos);
		local inv = meta:get_inventory()
		if not inv:is_empty("fuel") then
			return false
		elseif not inv:is_empty("dst") then
			return false
		elseif not inv:is_empty("src") then
			return false
		end
		return true
	end,
})

minetest.register_node("siderurgie:ac_active", {
	description = "bloc acierie",
	tiles = {"ac_top.png", "ac_bottom.png", "ac_side.png",
		"ac_side.png", "ac_side.png", "ac_front_active.png"},
	paramtype2 = "facedir",
	light_source = 8,
	drop = "default:furnace",
	--groups = {cracky=2},
	walkable = true,
	pointable = true,
	diggable = false,
	is_ground_content = false,
	legacy_facedir_simple = true,
	--sounds = default.node_sound_stone_defaults(),
	on_construct = function(pos)
		local meta = minetest.env:get_meta(pos)
		meta:set_string("formspec",
				"invsize[8,9;]"..
				"image[2,2;1,1;ac_fire_bg.png]"..
				"list[current_name;fuel;2,3;1,1;]"..
				"list[current_name;src;2,1;1,1;]"..
				"list[current_name;dst;5,1;2,2;]"..
				"list[current_player;main;0,5;8,4;]") 
		meta:set_string("infotext", "Acierie");
		local inv = meta:get_inventory()
		inv:set_size("fuel", 1)
		inv:set_size("src", 1)
		inv:set_size("dst", 4)
	end,
	can_dig = function(pos,player)
		local meta = minetest.env:get_meta(pos);
		local inv = meta:get_inventory()
		if not inv:is_empty("fuel") then
			return false
		elseif not inv:is_empty("dst") then
			return false
		elseif not inv:is_empty("src") then
			return false
		end
		return true
	end,
})

function hacky_swap_node(pos,name)
	local node = minetest.env:get_node(pos)
	local meta = minetest.env:get_meta(pos)
	local meta0 = meta:to_table()
	if node.name == name then
		return
	end
	node.name = name
	local meta0 = meta:to_table()
	minetest.env:set_node(pos,node)
	meta = minetest.env:get_meta(pos)
	meta:from_table(meta0)
end

minetest.register_abm({
	nodenames = {"siderurgie:ac","siderurgie:ac_active"},
	interval = 1.0,
	chance = 1,
	action = function(pos, node, active_object_count, active_object_count_wider)
		local meta = minetest.env:get_meta(pos)
		for i, name in ipairs({
				"fuel_totaltime",
				"fuel_time",
				"src_totaltime",
				"src_time"
		}) do
			if meta:get_string(name) == "" then
				meta:set_float(name, 0.0)
			end
		end

		local inv = meta:get_inventory()

		local srclist = inv:get_list("src")
		local cooked = nil
		
		if srclist then
			cooked = minetest.get_craft_result({method = "cooking", width = 1, items = srclist})
		end
		
		local was_active = false
		
		if meta:get_float("fuel_time") < meta:get_float("fuel_totaltime") then
			was_active = true
			meta:set_float("fuel_time", meta:get_float("fuel_time") + 1)
			meta:set_float("src_time", meta:get_float("src_time") + 1)
			if cooked and cooked.item and meta:get_float("src_time") >= cooked.time then
				-- check if there's room for output in "dst" list
				if inv:room_for_item("dst",cooked.item) then
					-- Put result in "dst" list
					inv:add_item("dst", cooked.item)
					-- take stuff from "src" list
					srcstack = inv:get_stack("src", 1)
					srcstack:take_item()
					inv:set_stack("src", 1, srcstack)
				else
					print("Could not insert '"..cooked.item.."'")
				end
				meta:set_string("src_time", 0)
			end
		end
		
		if meta:get_float("fuel_time") < meta:get_float("fuel_totaltime") then
			local percent = math.floor(meta:get_float("fuel_time") /
					meta:get_float("fuel_totaltime") * 100)
			meta:set_string("infotext","Acierie active: "..percent.."%")
			hacky_swap_node(pos,"siderurgie:ac_active")
			meta:set_string("formspec",
				"invsize[8,9;]"..
				"image[2,2;1,1;ac_fire_bg.png^[lowpart:"..
						(100-percent)..":ac_fire_fg.png]"..
				"list[current_name;fuel;2,3;1,1;]"..
				"list[current_name;src;2,1;1,1;]"..
				"list[current_name;dst;5,1;2,2;]"..
				"list[current_player;main;0,5;8,4;]")
			return
		end

		local fuel = nil
		local cooked = nil
		local fuellist = inv:get_list("fuel")
		local srclist = inv:get_list("src")
		
		if srclist then
			cooked = minetest.get_craft_result({method = "cooking", width = 1, items = srclist})
		end
		if fuellist then
			fuel = minetest.get_craft_result({method = "fuel", width = 1, items = fuellist})
		end

		if fuel.time <= 0 then
			meta:set_string("infotext","Acierie a plus de matiere")
			hacky_swap_node(pos,"siderurgie:ac")
			meta:set_string("formspec", default.furnace_inactive_formspec)
			return
		end

		if cooked.item:is_empty() then
			if was_active then
				meta:set_string("infotext","Acierie est vide")
				hacky_swap_node(pos,"siderurgie:ac")
				meta:set_string("formspec", default.furnace_inactive_formspec)
			end
			return
		end

		meta:set_string("fuel_totaltime", fuel.time)
		meta:set_string("fuel_time", 0)
		
		local stack = inv:get_stack("fuel", 1)
		stack:take_item()
		inv:set_stack("fuel", 1, stack)
	end,
})

--================================================================

--Bloc hf
---------

-- Le bloc hf ( haut fourneau ), permet de transformer le coke obtenu dans la cockerie en fonte liquide ( 4 cokes donne 1 seau de fonte )
-- Ce bloc doit etre alimenté par une source de lave pour fonctionner.
-- Cliquez sur le bloc en ayant du coke dans votre inventaire pour le transformer en seau de fonte

--Declaration du bloc Haut fourneau :

minetest.register_node("siderurgie:hf", {
	description = "bloc haut fourneau",
	tiles = {"hf_off.png"},
	paramtype2 = "facedir",
	light_source = 8,
	drop = "default:furnace",
	--groups = {cracky=2},
	walkable = true,
	pointable = true,
	diggable = false,
	is_ground_content = false,
	legacy_facedir_simple = true,
	
})

minetest.register_node("siderurgie:hf_on", {
	description = "bloc haut fourneau",
	tiles = {"hf_on.png"},
	paramtype2 = "facedir",
	light_source = 8,
	drop = "default:furnace",
	--groups = {cracky=2},
	walkable = true,
	pointable = true,
	diggable = false,
	is_ground_content = false,
	legacy_facedir_simple = true,
	
})

-- Gestion : si de la lave coule dessus alors le bloc fonctionne :

minetest.register_abm({
nodenames = {"siderurgie:hf"},
	interval = 1,
	chance = 1,
	action = function(pos, node, active_object_count, active_object_count_wider)
		local waterpos={x=pos.x, y=pos.y+1, z=pos.z}
		if minetest.env:get_node(waterpos).name=="default:lava_flowing" then
			--minetest.env:remove_node(pos)
			minetest.env:add_node(pos, {name="siderurgie:hf_on"})
			nodeupdate(pos)
			
		end
	end,
})

minetest.register_abm({
nodenames = {"siderurgie:hf_on"},
	interval = 1,
	chance = 1,
	action = function(pos, node, active_object_count, active_object_count_wider)
		local waterpos={x=pos.x, y=pos.y+1, z=pos.z}
		if minetest.env:get_node(waterpos).name~="default:lava_flowing" then
			--minetest.env:remove_node(pos)
			minetest.env:add_node(pos, {name="siderurgie:hf"})
			nodeupdate(pos)
			
		end
	end,
})

-- Creation de la fonte : si presence de coal dans le menu des item du joueur, suppression et remplacement par un seau de fonte :

minetest.register_on_punchnode(function(p, node, player)
	if node.name=="siderurgie:hf_on" and player:get_inventory():contains_item('main', 'siderurgie:coke 4') then
		player:get_inventory():add_item('main', "siderurgie:fonte")
		player:get_inventory():remove_item('main', 'siderurgie:coke 4')
	end

end)
		
--===================================================================================================================

--TUYAUX
--------

--Tuyaux pour l'acheminement du gaz provenant du bloc hf. Permet d'alimenter et faire fonctionner les blocs
--Acierie et cockerie

-- Déclaration des blocs tuyaux 

--vertical

minetest.register_node("siderurgie:tuyau_v", {
	description = "tuyaux vertical",
	tiles = {"tuyau_v_off.png"},
	paramtype2 = "facedir",
	drawtype = "glasslike",
	light_source = 8,
	--drop = "default:furnace",
	groups = {cracky=2},
	walkable = true,
	pointable = true,
	diggable = true,
	is_ground_content = false,
	legacy_facedir_simple = true,
	
})

minetest.register_node("siderurgie:tuyau_v_on", {
	description = "tuyau vertical",
	tiles = {"tuyau_v_on.png"},
	paramtype2 = "facedir",
	drawtype = "glasslike",
	light_source = 8,
	--drop = "default:furnace",
	groups = {cracky=2},
	walkable = true,
	pointable = true,
	diggable = true,
	is_ground_content = false,
	legacy_facedir_simple = true,
	
})

--horizontal

minetest.register_node("siderurgie:tuyau_h", {
	description = "tuyaux horizontal",
	tiles = {"tuyau_h_off.png"},
	paramtype2 = "facedir",
	drawtype = "glasslike",
	light_source = 8,
	--drop = "default:furnace",
	groups = {cracky=2},
	walkable = true,
	pointable = true,
	diggable = true,
	is_ground_content = false,
	legacy_facedir_simple = true,
	
})

minetest.register_node("siderurgie:tuyau_h_on", {
	description = "tuyau horizontal",
	tiles = {"tuyau_h_on.png"},
	paramtype2 = "facedir",
	drawtype = "glasslike",
	light_source = 8,
	--drop = "default:furnace",
	groups = {cracky=2},
	walkable = true,
	pointable = true,
	diggable = true,
	is_ground_content = false,
	legacy_facedir_simple = true,
	
})

--Animation : les tuyaux deviennent ON si ils sont plaçés contre un bloc HF_on ou contre un autre tuyau deja ON

--vertical si hf_on
minetest.register_abm({
nodenames = {"siderurgie:tuyau_v"},
	interval = 1,
	chance = 1,
	action = function(pos, node, active_object_count, active_object_count_wider)
		local waterpos={x=pos.x, y=pos.y+1, z=pos.z}
		
		if minetest.env:get_node(waterpos).name=="siderurgie:hf_on" then
			--minetest.env:remove_node(pos)
			minetest.env:add_node(pos, {name="siderurgie:tuyau_v_on"})
			nodeupdate(pos)
			
		end
	end,
})
minetest.register_abm({
nodenames = {"siderurgie:tuyau_v_on"},
	interval = 1,
	chance = 1,
	action = function(pos, node, active_object_count, active_object_count_wider)
		local waterpos={x=pos.x, y=pos.y+1, z=pos.z}
		
		if minetest.env:get_node(waterpos).name=="siderurgie:hf" then
			--minetest.env:remove_node(pos)
			minetest.env:add_node(pos, {name="siderurgie:tuyau_v"})
			nodeupdate(pos)
			
		end
	end,
})

--vertical si vertical_on
minetest.register_abm({
nodenames = {"siderurgie:tuyau_v"},
	interval = 1,
	chance = 1,
	action = function(pos, node, active_object_count, active_object_count_wider)
		local waterpos={x=pos.x, y=pos.y+1, z=pos.z}
		
		if minetest.env:get_node(waterpos).name=="siderurgie:tuyau_v_on" then
			--minetest.env:remove_node(pos)
			minetest.env:add_node(pos, {name="siderurgie:tuyau_v_on"})
			nodeupdate(pos)
			
		end
	end,
})
minetest.register_abm({
nodenames = {"siderurgie:tuyau_v_on"},
	interval = 1,
	chance = 1,
	action = function(pos, node, active_object_count, active_object_count_wider)
		local waterpos={x=pos.x, y=pos.y+1, z=pos.z}
		
		if minetest.env:get_node(waterpos).name=="siderurgie:tuyau_v" then
			--minetest.env:remove_node(pos)
			minetest.env:add_node(pos, {name="siderurgie:tuyau_v"})
			nodeupdate(pos)
			
		end
	end,
})
--vertical si horizontal_on
minetest.register_abm({
nodenames = {"siderurgie:tuyau_v"},
	interval = 1,
	chance = 1,
	action = function(pos, node, active_object_count, active_object_count_wider)
		local waterpos={x=pos.x, y=pos.y+1, z=pos.z}
		
		if minetest.env:get_node(waterpos).name=="siderurgie:tuyau_h_on" then
			--minetest.env:remove_node(pos)
			minetest.env:add_node(pos, {name="siderurgie:tuyau_v_on"})
			nodeupdate(pos)
			
		end
	end,
})
minetest.register_abm({
nodenames = {"siderurgie:tuyau_v_on"},
	interval = 1,
	chance = 1,
	action = function(pos, node, active_object_count, active_object_count_wider)
		local waterpos={x=pos.x, y=pos.y+1, z=pos.z}
		
		if minetest.env:get_node(waterpos).name=="siderurgie:tuyau_h" then
			--minetest.env:remove_node(pos)
			minetest.env:add_node(pos, {name="siderurgie:tuyau_v"})
			nodeupdate(pos)
			
		end
	end,
})

--===
--===

--horizontal si hf_on
minetest.register_abm({
nodenames = {"siderurgie:tuyau_h"},
	interval = 1,
	chance = 1,
	action = function(pos, node, active_object_count, active_object_count_wider)
		local waterpos={x=pos.x+1, y=pos.y, z=pos.z}
		
		if minetest.env:get_node(waterpos).name=="siderurgie:hf_on" then
			--minetest.env:remove_node(pos)
			minetest.env:add_node(pos, {name="siderurgie:tuyau_h_on"})
			nodeupdate(pos)
			
		end
	end,
})
minetest.register_abm({
nodenames = {"siderurgie:tuyau_h_on"},
	interval = 1,
	chance = 1,
	action = function(pos, node, active_object_count, active_object_count_wider)
		local waterpos={x=pos.x+1, y=pos.y, z=pos.z}
		
		if minetest.env:get_node(waterpos).name=="siderurgie:hf" then
			--minetest.env:remove_node(pos)
			minetest.env:add_node(pos, {name="siderurgie:tuyau_h"})
			nodeupdate(pos)
			
		end
	end,
})

--horizontal si vertical_on
minetest.register_abm({
nodenames = {"siderurgie:tuyau_h"},
	interval = 1,
	chance = 1,
	action = function(pos, node, active_object_count, active_object_count_wider)
		local waterpos={x=pos.x+1, y=pos.y, z=pos.z}
		
		if minetest.env:get_node(waterpos).name=="siderurgie:tuyau_v_on" then
			--minetest.env:remove_node(pos)
			minetest.env:add_node(pos, {name="siderurgie:tuyau_h_on"})
			nodeupdate(pos)
			
		end
	end,
})
minetest.register_abm({
nodenames = {"siderurgie:tuyau_h_on"},
	interval = 1,
	chance = 1,
	action = function(pos, node, active_object_count, active_object_count_wider)
		local waterpos={x=pos.x+1, y=pos.y, z=pos.z}
		
		if minetest.env:get_node(waterpos).name=="siderurgie:tuyau_v" then
			--minetest.env:remove_node(pos)
			minetest.env:add_node(pos, {name="siderurgie:tuyau_h"})
			nodeupdate(pos)
			
		end
	end,
})
--horizontal si horizontal_on
minetest.register_abm({
nodenames = {"siderurgie:tuyau_h"},
	interval = 1,
	chance = 1,
	action = function(pos, node, active_object_count, active_object_count_wider)
		local waterpos={x=pos.x+1, y=pos.y, z=pos.z}
		
		if minetest.env:get_node(waterpos).name=="siderurgie:tuyau_h_on" then
			--minetest.env:remove_node(pos)
			minetest.env:add_node(pos, {name="siderurgie:tuyau_h_on"})
			nodeupdate(pos)
			
		end
	end,
})
minetest.register_abm({
nodenames = {"siderurgie:tuyau_h_on"},
	interval = 1,
	chance = 1,
	action = function(pos, node, active_object_count, active_object_count_wider)
		local waterpos={x=pos.x+1, y=pos.y, z=pos.z}
		
		if minetest.env:get_node(waterpos).name=="siderurgie:tuyau_h" then
			--minetest.env:remove_node(pos)
			minetest.env:add_node(pos, {name="siderurgie:tuyau_h"})
			nodeupdate(pos)
			
		end
	end,
})
